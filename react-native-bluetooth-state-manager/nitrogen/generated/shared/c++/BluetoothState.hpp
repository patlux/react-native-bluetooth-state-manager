///
/// BluetoothState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::bluetoothstatemanager {

  /**
   * An enum which can be represented as a JavaScript union (BluetoothState).
   */
  enum class BluetoothState {
    POWEREDON      SWIFT_NAME(poweredon) = 0,
    POWEREDOFF      SWIFT_NAME(poweredoff) = 1,
    UNAUTHORIZED      SWIFT_NAME(unauthorized) = 2,
    UNSUPPORTED      SWIFT_NAME(unsupported) = 3,
    RESETTING      SWIFT_NAME(resetting) = 4,
    UNKNOWN      SWIFT_NAME(unknown) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::bluetoothstatemanager

namespace margelo::nitro {

  using namespace margelo::nitro::bluetoothstatemanager;

  // C++ BluetoothState <> JS BluetoothState (union)
  template <>
  struct JSIConverter<BluetoothState> final {
    static inline BluetoothState fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("PoweredOn"): return BluetoothState::POWEREDON;
        case hashString("PoweredOff"): return BluetoothState::POWEREDOFF;
        case hashString("Unauthorized"): return BluetoothState::UNAUTHORIZED;
        case hashString("Unsupported"): return BluetoothState::UNSUPPORTED;
        case hashString("Resetting"): return BluetoothState::RESETTING;
        case hashString("Unknown"): return BluetoothState::UNKNOWN;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum BluetoothState - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, BluetoothState arg) {
      switch (arg) {
        case BluetoothState::POWEREDON: return JSIConverter<std::string>::toJSI(runtime, "PoweredOn");
        case BluetoothState::POWEREDOFF: return JSIConverter<std::string>::toJSI(runtime, "PoweredOff");
        case BluetoothState::UNAUTHORIZED: return JSIConverter<std::string>::toJSI(runtime, "Unauthorized");
        case BluetoothState::UNSUPPORTED: return JSIConverter<std::string>::toJSI(runtime, "Unsupported");
        case BluetoothState::RESETTING: return JSIConverter<std::string>::toJSI(runtime, "Resetting");
        case BluetoothState::UNKNOWN: return JSIConverter<std::string>::toJSI(runtime, "Unknown");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert BluetoothState to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("PoweredOn"):
        case hashString("PoweredOff"):
        case hashString("Unauthorized"):
        case hashString("Unsupported"):
        case hashString("Resetting"):
        case hashString("Unknown"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro

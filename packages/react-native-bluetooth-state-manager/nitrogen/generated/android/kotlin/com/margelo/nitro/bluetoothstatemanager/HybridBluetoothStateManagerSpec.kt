///
/// HybridBluetoothStateManagerSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.bluetoothstatemanager

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the BluetoothStateManager HybridObject.
 * Implement this abstract class to create Kotlin-based instances of BluetoothStateManager.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridBluetoothStateManagerSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun getState(): Promise<BluetoothState>
  
  @DoNotStrip
  @Keep
  abstract fun getStateSync(): BluetoothState
  
  abstract fun addListener(callback: (state: BluetoothState) -> Unit): String
  
  @DoNotStrip
  @Keep
  private fun addListener_cxx(callback: Func_void_BluetoothState): String {
    val __result = addListener(callback)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun removeListener(callbackRef: String): Unit
  
  @DoNotStrip
  @Keep
  abstract fun openSettings(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun requestToEnable(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun requestToDisable(): Promise<Unit>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridBluetoothStateManagerSpec"
  }
}

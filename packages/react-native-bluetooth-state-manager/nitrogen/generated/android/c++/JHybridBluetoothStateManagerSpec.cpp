///
/// JHybridBluetoothStateManagerSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridBluetoothStateManagerSpec.hpp"

// Forward declaration of `BluetoothState` to properly resolve imports.
namespace margelo::nitro::bluetoothstatemanager { enum class BluetoothState; }

#include <NitroModules/Promise.hpp>
#include "BluetoothState.hpp"
#include <NitroModules/JPromise.hpp>
#include "JBluetoothState.hpp"
#include <string>
#include <functional>
#include "JFunc_void_BluetoothState.hpp"

namespace margelo::nitro::bluetoothstatemanager {

  jni::local_ref<JHybridBluetoothStateManagerSpec::jhybriddata> JHybridBluetoothStateManagerSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBluetoothStateManagerSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBluetoothStateManagerSpec::initHybrid),
    });
  }

  size_t JHybridBluetoothStateManagerSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<BluetoothState>> JHybridBluetoothStateManagerSpec::getState() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getState");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<BluetoothState>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JBluetoothState>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  BluetoothState JHybridBluetoothStateManagerSpec::getStateSync() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JBluetoothState>()>("getStateSync");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  std::string JHybridBluetoothStateManagerSpec::addListener(const std::function<void(BluetoothState /* state */)>& callback) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<JFunc_void_BluetoothState::javaobject> /* callback */)>("addListener_cxx");
    auto __result = method(_javaPart, JFunc_void_BluetoothState_cxx::fromCpp(callback));
    return __result->toStdString();
  }
  void JHybridBluetoothStateManagerSpec::removeListener(const std::string& callbackRef) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* callbackRef */)>("removeListener");
    method(_javaPart, jni::make_jstring(callbackRef));
  }
  std::shared_ptr<Promise<void>> JHybridBluetoothStateManagerSpec::openSettings() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("openSettings");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBluetoothStateManagerSpec::requestToEnable() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("requestToEnable");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridBluetoothStateManagerSpec::requestToDisable() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("requestToDisable");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::bluetoothstatemanager

///
/// HybridBluetoothStateManagerSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BluetoothState` to properly resolve imports.
namespace margelo::nitro::bluetoothstatemanager { enum class BluetoothState; }

#include <NitroModules/Promise.hpp>
#include "BluetoothState.hpp"
#include <string>
#include <functional>

namespace margelo::nitro::bluetoothstatemanager {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `BluetoothStateManager`
   * Inherit this class to create instances of `HybridBluetoothStateManagerSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBluetoothStateManager: public HybridBluetoothStateManagerSpec {
   * public:
   *   HybridBluetoothStateManager(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBluetoothStateManagerSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBluetoothStateManagerSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridBluetoothStateManagerSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<BluetoothState>> getState() = 0;
      virtual BluetoothState getStateSync() = 0;
      virtual std::string addListener(const std::function<void(BluetoothState /* state */)>& callback) = 0;
      virtual void removeListener(const std::string& callbackRef) = 0;
      virtual std::shared_ptr<Promise<void>> openSettings() = 0;
      virtual std::shared_ptr<Promise<void>> requestToEnable() = 0;
      virtual std::shared_ptr<Promise<void>> requestToDisable() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "BluetoothStateManager";
  };

} // namespace margelo::nitro::bluetoothstatemanager

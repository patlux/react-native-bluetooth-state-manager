///
/// HybridBluetoothStateManagerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridBluetoothStateManagerSpec``
public protocol HybridBluetoothStateManagerSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func getState() throws -> Promise<BluetoothState>
  func getStateSync() throws -> BluetoothState
  func addListener(callback: @escaping (_ state: BluetoothState) -> Void) throws -> String
  func removeListener(callbackRef: String) throws -> Void
  func openSettings() throws -> Promise<Void>
  func requestToEnable() throws -> Promise<Void>
  func requestToDisable() throws -> Promise<Void>
}

/// See ``HybridBluetoothStateManagerSpec``
public class HybridBluetoothStateManagerSpec_base {
  private weak var cxxWrapper: HybridBluetoothStateManagerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridBluetoothStateManagerSpec_cxx {
  #if DEBUG
    guard self is HybridBluetoothStateManagerSpec else {
      fatalError("`self` is not a `HybridBluetoothStateManagerSpec`! Did you accidentally inherit from `HybridBluetoothStateManagerSpec_base` instead of `HybridBluetoothStateManagerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridBluetoothStateManagerSpec_cxx(self as! HybridBluetoothStateManagerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the BluetoothStateManager HybridObject.
 * Implement this protocol to create Swift-based instances of BluetoothStateManager.
 * ```swift
 * class HybridBluetoothStateManager : HybridBluetoothStateManagerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridBluetoothStateManagerSpec = HybridBluetoothStateManagerSpec_protocol & HybridBluetoothStateManagerSpec_base

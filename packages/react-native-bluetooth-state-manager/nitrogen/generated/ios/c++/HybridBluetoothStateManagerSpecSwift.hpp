///
/// HybridBluetoothStateManagerSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBluetoothStateManagerSpec.hpp"

// Forward declaration of `HybridBluetoothStateManagerSpec_cxx` to properly resolve imports.
namespace BluetoothStateManager { class HybridBluetoothStateManagerSpec_cxx; }

// Forward declaration of `BluetoothState` to properly resolve imports.
namespace margelo::nitro::bluetoothstatemanager { enum class BluetoothState; }

#include <NitroModules/Promise.hpp>
#include "BluetoothState.hpp"
#include <functional>

#include "BluetoothStateManager-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bluetoothstatemanager {

  /**
   * The C++ part of HybridBluetoothStateManagerSpec_cxx.swift.
   *
   * HybridBluetoothStateManagerSpecSwift (C++) accesses HybridBluetoothStateManagerSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBluetoothStateManagerSpec_cxx can directly inherit from the C++ class HybridBluetoothStateManagerSpec
   * to simplify the whole structure and memory management.
   */
  class HybridBluetoothStateManagerSpecSwift: public virtual HybridBluetoothStateManagerSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridBluetoothStateManagerSpecSwift(const BluetoothStateManager::HybridBluetoothStateManagerSpec_cxx& swiftPart):
      HybridObject(HybridBluetoothStateManagerSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline BluetoothStateManager::HybridBluetoothStateManagerSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<BluetoothState>> getState() override {
      auto __result = _swiftPart.getState();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline BluetoothState getStateSync() override {
      auto __result = _swiftPart.getStateSync();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline double addListener(const std::function<void(BluetoothState /* state */)>& callback) override {
      auto __result = _swiftPart.addListener(callback);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void removeListener(double index) override {
      auto __result = _swiftPart.removeListener(std::forward<decltype(index)>(index));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<void>> openSettings() override {
      auto __result = _swiftPart.openSettings();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> requestToEnable() override {
      auto __result = _swiftPart.requestToEnable();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> requestToDisable() override {
      auto __result = _swiftPart.requestToDisable();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    BluetoothStateManager::HybridBluetoothStateManagerSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::bluetoothstatemanager
